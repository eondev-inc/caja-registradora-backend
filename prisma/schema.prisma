generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/prisma"
  outputToNestJsResourceStructure = "true"
  reExport                        = "false"
  exportRelationModifierClasses   = "false"
  updateDtoPrefix                 = "Update"
  createDtoPrefix                 = "Create"
  dtoSuffix                       = "Dto"
}


model cash_register {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  branch_code   String?         @db.VarChar(50)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  status        Boolean?        @default(true)
  open_register open_register[]
}

model cashiers {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?         @db.Uuid
  status        Boolean?        @default(true)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  open_register open_register[]

  @@index([user_id], map: "idx_cashiers_user_id")
}

model invoice {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_uuid  String?         @db.Uuid
  invoice_number String?         @db.VarChar(50)
  invoice_date   DateTime?       @db.Date
  total_amount   Decimal?        @db.Decimal(10, 2)
  tax_amount     Decimal?        @db.Decimal(10, 2)
  notes          String?
  status         Boolean?        @default(true)
  payment_status String?         @db.VarChar(50)
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?       @default(now()) @db.Timestamp(6)
  amount_in      Decimal?        @db.Decimal(10, 2)
  amount_out     Decimal?        @db.Decimal(10, 2)
  invoice_items  invoice_items[]
  transactions   transactions[]
}

model invoice_items {
  id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  invoice_id        String      @db.Uuid
  description       String?
  specialty_code    String?     @db.VarChar(50)
  professional_uuid String?     @db.Uuid
  quantity          Int?
  total_price       Decimal?    @db.Decimal(10, 2)
  discount_amount   Decimal?    @db.Decimal(10, 2)
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  prevision_id      String?     @db.Uuid
  invoice           invoice     @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice")
  previsions        previsions? @relation(fields: [prevision_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_prevision")

  @@index([invoice_id], map: "idx_invoice_items_invoice_id")
  @@index([prevision_id], map: "idx_invoice_items_prevision_id")
}

model open_register {
  id               String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shift_init       DateTime?        @db.Timestamp(6)
  shift_end        DateTime?        @db.Timestamp(6)
  initial_cash     Decimal?         @db.Decimal(10, 2)
  status           Boolean?         @default(true)
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  updated_at       DateTime?        @default(now()) @db.Timestamp(6)
  created_by       String?          @db.Uuid
  cash_register_id String?          @db.Uuid
  cashiers_id      String?          @db.Uuid
  cash_register    cash_register?   @relation(fields: [cash_register_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cash_register")
  cashiers         cashiers?        @relation(fields: [cashiers_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cashiers")
  users            users?           @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_created_by")
  reconciliation   reconciliation[]
  transactions     transactions[]

  @@index([cash_register_id], map: "idx_open_register_cash_register_id")
  @@index([cashiers_id], map: "idx_open_register_cashiers_id")
  @@index([created_by], map: "idx_open_register_created_by")
}

model payment_method {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  method_name  String?        @db.VarChar(255)
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  status       Boolean?       @default(true)
  transactions transactions[]
}

model previsions {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code          String?         @db.VarChar(50)
  name          String?         @db.VarChar(255)
  status        Boolean?        @default(true)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  invoice_items invoice_items[]
}

model reconciliation {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  open_register_id String        @db.Uuid
  date             DateTime?     @db.Date
  opening_balance  Decimal?      @db.Decimal(10, 2)
  closing_balance  Decimal?      @db.Decimal(10, 2)
  expected_balance Decimal?      @db.Decimal(10, 2)
  sales_summary    String?
  total_sales      Decimal?      @db.Decimal(10, 2)
  cash_deposits    Decimal?      @db.Decimal(10, 2)
  cash_withdrawals Decimal?      @db.Decimal(10, 2)
  discrepancy      Decimal?      @db.Decimal(10, 2)
  notes            String?
  status           Boolean?      @default(true)
  created_at       DateTime?     @default(now()) @db.Timestamp(6)
  updated_at       DateTime?     @default(now()) @db.Timestamp(6)
  approved_by      String?       @db.Uuid
  open_register    open_register @relation(fields: [open_register_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_open_register")

  @@index([open_register_id], map: "idx_reconciliation_open_register_id")
}

model roles {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role_name   String?   @db.VarChar(255)
  description String?
  status      Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users[]
}

model transaction_type {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  transaction_name String?        @db.VarChar(255)
  description      String?
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  status           Boolean?       @default(true)
  transactions     transactions[]
}

model transactions {
  id                  String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  open_register_id    String           @db.Uuid
  invoice_id          String           @db.Uuid
  transaction_type_id String           @db.Uuid
  payment_method_id   String           @db.Uuid
  amount              Decimal          @db.Decimal(10, 2)
  description         String?
  reference_number    String?          @db.VarChar(255)
  status              Boolean?         @default(true)
  created_at          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at          DateTime?        @default(now()) @db.Timestamp(6)
  invoice             invoice          @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice")
  open_register       open_register    @relation(fields: [open_register_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_open_register")
  payment_method      payment_method   @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payment_method")
  transaction_type    transaction_type @relation(fields: [transaction_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_type")

  @@index([invoice_id], map: "idx_transactions_invoice_id")
  @@index([open_register_id], map: "idx_transactions_open_register_id")
  @@index([payment_method_id], map: "idx_transactions_payment_method_id")
  @@index([transaction_type_id], map: "idx_transactions_transaction_type_id")
}

model users {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?         @db.Uuid
  email         String?         @db.VarChar(255)
  password      String?         @db.VarChar(255)
  forenames     String?         @db.VarChar(255)
  surnames      String?         @db.VarChar(255)
  nid_type      String?         @db.VarChar(50)
  nid           String?         @db.VarChar(100)
  role_id       String?         @db.Uuid
  branch_code   String?         @db.VarChar(50)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  status        Boolean?        @default(true)
  cashiers      cashiers[]
  open_register open_register[]
  roles         roles?          @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
  users_tokens  users_tokens[]

  @@index([role_id], map: "idx_users_role_id")
}

model users_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  is_revoked Boolean?  @default(false)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@index([user_id], map: "idx_users_tokens_user_id")
}
