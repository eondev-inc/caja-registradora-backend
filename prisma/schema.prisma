generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model invoice {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  custumer_nid      String?             @db.VarChar(50)
  invoice_number    String?             @db.VarChar(50)
  total_amount      Int?                
  tax_amount        Int?                
  notes             String?
  status            invoice_status_enum @default(EMITIDO)
  payment_status    payment_status      @default(PAGADO)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  invoice_items     invoice_items[]
  transactions      transactions[]
}

model invoice_items {
  id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  invoice_id        String      @db.Uuid
  description       String?     @db.VarChar(255)
  item_code         String?     @db.VarChar(50)
  professional_uuid String?     @db.Uuid
  quantity          Int?
  total_price       Int?
  discount_amount   Int?
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  invoice           invoice     @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice")

  @@index([invoice_id], map: "idx_invoice_items_invoice_id")
}

model open_register {
  id               String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shift_init       DateTime?            @db.Timestamp(6)
  shift_end        DateTime?            @db.Timestamp(6)
  initial_cash     Int?                 
  status           register_status_enum @default(ABIERTO)
  created_at       DateTime?            @default(now()) @db.Timestamp(6)
  updated_at       DateTime?            @default(now()) @db.Timestamp(6)
  created_by       String?              @db.Uuid
  users            users?               @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_created_by")
  reconciliation   reconciliation[]
  transactions     transactions[]

  @@index([created_by], map: "idx_open_register_cash_register_id")
}

model payment_method {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  method_name  String?        @db.VarChar(255)
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  status       Boolean?       @default(true)
  transactions transactions[]
}

model reconciliation {
  id               String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  open_register_id String                     @db.Uuid
  opening_balance  Int?                   
  closing_balance  Int?                   
  expected_balance Int?                   
  sales_summary    Json
  total_sales      Int?                   
  cash_deposits    Int?                   
  cash_withdrawals Int?                   
  discrepancy      Int?                   
  notes            String?
  status           reconciliation_status_enum @default(PENDIENTE)
  created_at       DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at       DateTime?                  @default(now()) @db.Timestamp(6)
  approved_by      String?                    @db.Uuid
  open_register    open_register              @relation(fields: [open_register_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_open_register")

  @@index([open_register_id], map: "idx_reconciliation_open_register_id")
}

model permmisions {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  status      Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  role_permissions role_permissions[]
  @@index([id], map: "idx_permmisions_id")
  @@index([name], map: "idx_permmisions_perm_name")
}

model role_permissions {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role_id       String    @db.Uuid
  permission_id String    @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  status        Boolean?  @default(true)
  roles         roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
  permissions   permmisions @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_permission")

  @@index([role_id], map: "idx_role_permissions_role_id")
  @@index([permission_id], map: "idx_role_permissions_permission_id")
}

model roles {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role_name   String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  user_roles  user_roles[]
  role_permissions role_permissions[]
  status      Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@index([id], map: "idx_roles_id")
  @@index([role_name], map: "idx_roles_role_name")
}

model user_roles {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id String @db.Uuid
  role_id String @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  status  Boolean? @default(true)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")

  @@index([user_id], map: "idx_user_roles_user_id")
  @@index([role_id], map: "idx_user_roles_role_id")
}

model transaction_type {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  transaction_name String?        @db.VarChar(255)
  description      String?
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  status           Boolean?       @default(true)
  transactions     transactions[]
}

model transactions {
  id                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  open_register_id    String                  @db.Uuid
  invoice_id          String                  @db.Uuid
  transaction_type_id String                  @db.Uuid
  payment_method_id   String                  @db.Uuid
  original_transaction_id String?             @db.Uuid
  amount              Int                     
  description         String?
  reference_number    String?                 @db.VarChar(255)
  status              transaction_status_enum @default(COMPLETADO)
  created_at          DateTime?               @default(now()) @db.Timestamp(6)
  updated_at          DateTime?               @default(now()) @db.Timestamp(6)
  invoice             invoice                 @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice")
  open_register       open_register           @relation(fields: [open_register_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_open_register")
  payment_method      payment_method          @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payment_method")
  transaction_type    transaction_type        @relation(fields: [transaction_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_type")

  @@index([invoice_id], map: "idx_transactions_invoice_id")
  @@index([open_register_id], map: "idx_transactions_open_register_id")
  @@index([payment_method_id], map: "idx_transactions_payment_method_id")
  @@index([transaction_type_id], map: "idx_transactions_transaction_type_id")
}

model users {
  id            String          @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  password      String?         @db.VarChar(255)
  forenames     String?         @db.VarChar(255)
  surnames      String?         @db.VarChar(255)
  nid           String          @unique @db.VarChar(100)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  status        Boolean?        @default(true)
  open_register open_register[]
  users_tokens  users_tokens[]
  user_roles    user_roles[]
  entity_users  entity_users[]

  @@index([id], map: "idx_users_id")
  @@index([email], map: "idx_users_email")
  @@index([nid], map: "idx_users_nid")

}

model users_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  is_revoked Boolean?  @default(false)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@index([user_id], map: "idx_users_tokens_user_id")
}

model entity {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nid         String?   @db.VarChar(50)
  entity_name String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  contact_phone       String?   @db.VarChar(50)
  contact_email       String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  status      Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_by  String?   @db.Uuid
  entity_users entity_users[]

  @@index([id], map: "idx_entity_id")
  @@index([nid], map: "idx_entity_nid")
  @@index([entity_name], map: "idx_entity_name")
}

model entity_users {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entity_id String @db.Uuid
  user_id  String @db.Uuid
  status   Boolean? @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  entities entity @relation(fields: [entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_entity")
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@index([entity_id], map: "idx_entity_users_entity_id")
  @@index([user_id], map: "idx_entity_users_user_id")
}

enum invoice_status_enum {
  EMITIDO
  ANULADO
  PAGADO
  DEVUELTO
}

enum reconciliation_status_enum {
  PENDIENTE
  CUADRADO
  NO_CUADRADO @map("NO CUADRADO")
  RECHAZADO
}

enum register_status_enum {
  ABIERTO
  CERRADO
  SUSPENDIDO
}

enum transaction_status_enum {
  COMPLETADO
  PENDIENTE
  CANCELADO
  DEVUELTO
}

enum payment_status {
  PAGADO
  ANULADO
}
